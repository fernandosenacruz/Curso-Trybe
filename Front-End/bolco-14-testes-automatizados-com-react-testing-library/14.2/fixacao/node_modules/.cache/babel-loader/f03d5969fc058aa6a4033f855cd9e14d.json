{"ast":null,"code":"var _jsxFileName = \"/home/fernandosena/Curso-Trybe/Exercicios/Front-End/bolco-14-testes-automatizados-com-react-testing-library/14.2/fixacao/src/App.js\";\n// App.test.js\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nafterEach(() => jest.clearAllMocks());\nit('fetches a joke', async () => {\n  const joke = {\n    id: '7h3oGtrOfxc',\n    joke: 'Whiteboards ... are remarkable.',\n    status: 200\n  };\n  jest.spyOn(global, 'fetch');\n  global.fetch.mockResolvedValue({\n    json: jest.fn().mockResolvedValue(joke)\n  });\n  render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this));\n  const renderedJoke = await screen.findByText('Whiteboards ... are remarkable.');\n  expect(renderedJoke).toBeInTheDocument();\n  expect(global.fetch).toBeCalledTimes(1);\n  expect(global.fetch).toBeCalledWith('https://icanhazdadjoke.com/', {\n    headers: {\n      Accept: 'application/json'\n    }\n  });\n});","map":{"version":3,"sources":["/home/fernandosena/Curso-Trybe/Exercicios/Front-End/bolco-14-testes-automatizados-com-react-testing-library/14.2/fixacao/src/App.js"],"names":["React","render","screen","App","afterEach","jest","clearAllMocks","it","joke","id","status","spyOn","global","fetch","mockResolvedValue","json","fn","renderedJoke","findByText","expect","toBeInTheDocument","toBeCalledTimes","toBeCalledWith","headers","Accept"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,wBAA/B;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEAC,SAAS,CAAC,MAAMC,IAAI,CAACC,aAAL,EAAP,CAAT;AAEAC,EAAE,CAAC,gBAAD,EAAmB,YAAY;AAC/B,QAAMC,IAAI,GAAG;AACXC,IAAAA,EAAE,EAAE,aADO;AAEXD,IAAAA,IAAI,EAAE,iCAFK;AAGXE,IAAAA,MAAM,EAAE;AAHG,GAAb;AAMAL,EAAAA,IAAI,CAACM,KAAL,CAAWC,MAAX,EAAmB,OAAnB;AACAA,EAAAA,MAAM,CAACC,KAAP,CAAaC,iBAAb,CAA+B;AAC7BC,IAAAA,IAAI,EAAEV,IAAI,CAACW,EAAL,GAAUF,iBAAV,CAA4BN,IAA5B;AADuB,GAA/B;AAIAP,EAAAA,MAAM,eAAC,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UAAD,CAAN;AACA,QAAMgB,YAAY,GAAG,MAAMf,MAAM,CAACgB,UAAP,CAAkB,iCAAlB,CAA3B;AACAC,EAAAA,MAAM,CAACF,YAAD,CAAN,CAAqBG,iBAArB;AACAD,EAAAA,MAAM,CAACP,MAAM,CAACC,KAAR,CAAN,CAAqBQ,eAArB,CAAqC,CAArC;AACAF,EAAAA,MAAM,CAACP,MAAM,CAACC,KAAR,CAAN,CAAqBS,cAArB,CACE,6BADF,EAEE;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAAX,GAFF;AAID,CApBC,CAAF","sourcesContent":["// App.test.js\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\n\nafterEach(() => jest.clearAllMocks());\n\nit('fetches a joke', async () => {\n  const joke = {\n    id: '7h3oGtrOfxc',\n    joke: 'Whiteboards ... are remarkable.',\n    status: 200,\n  };\n\n  jest.spyOn(global, 'fetch');\n  global.fetch.mockResolvedValue({\n    json: jest.fn().mockResolvedValue(joke),\n  });\n\n  render(<App />);\n  const renderedJoke = await screen.findByText('Whiteboards ... are remarkable.');\n  expect(renderedJoke).toBeInTheDocument();\n  expect(global.fetch).toBeCalledTimes(1);\n  expect(global.fetch).toBeCalledWith(\n    'https://icanhazdadjoke.com/',\n    { headers: { Accept: 'application/json' } },\n  );\n});"]},"metadata":{},"sourceType":"module"}