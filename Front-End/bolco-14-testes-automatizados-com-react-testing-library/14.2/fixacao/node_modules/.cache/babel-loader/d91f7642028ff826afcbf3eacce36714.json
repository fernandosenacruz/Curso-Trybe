{"ast":null,"code":"/**\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\n * which should only be used for elements with a non-presentational role i.e.\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\n *\n * Implements aria-hidden semantics (i.e. parent overrides child)\n * Ignores \"Child Presentational: True\" characteristics\n *\n * @param element\n * @param options\n * @returns {boolean} true if excluded, otherwise false\n */\nexport function isInaccessible(element) {\n  var _element$ownerDocumen;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS === void 0 ? (_element$ownerDocumen = element.ownerDocument.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getComputedStyle : _options$getComputedS,\n      _options$isSubtreeIna = options.isSubtreeInaccessible,\n      isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  } // since visibility is inherited we can exit early\n\n\n  if (getComputedStyle(element).visibility === \"hidden\") {\n    return true;\n  }\n\n  var currentElement = element;\n\n  while (currentElement) {\n    if (isSubtreeInaccessibleImpl(currentElement, {\n      getComputedStyle: getComputedStyle\n    })) {\n      return true;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return false;\n}\n/**\n *\n * @param element\n * @param options\n * @returns {boolean} - `true` if every child of the element is inaccessible\n */\n\nexport function isSubtreeInaccessible(element) {\n  var _element$ownerDocumen2;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS2 = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS2 === void 0 ? (_element$ownerDocumen2 = element.ownerDocument.defaultView) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.getComputedStyle : _options$getComputedS2;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  }\n\n  if (element.hidden === true) {\n    return true;\n  }\n\n  if (element.getAttribute(\"aria-hidden\") === \"true\") {\n    return true;\n  }\n\n  if (getComputedStyle(element).display === \"none\") {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../sources/is-inaccessible.ts"],"names":["options","getComputedStyle","element","isSubtreeInaccessibleImpl","currentElement"],"mappings":"AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAA,cAAA,CAAA,OAAA,EAGI;AAAA,MAAA,qBAAA;;AAAA,MADVA,OACU,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADuB,EACvB;AACV,MAAA,qBAAA,GAGIA,OAHJ,CAAA,gBAAA;AAAA,MACCC,gBADD,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GACoBC,OAAO,CAAPA,aAAAA,CADpB,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACoBA,qBAAAA,CADpB,gBAAA,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAGIF,OAHJ,CAAA,qBAAA;AAAA,MAEwBG,yBAFxB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,qBAAA;;AAIA,MAAI,OAAA,gBAAA,KAAJ,UAAA,EAA4C;AAC3C,UAAM,IAAA,SAAA,CAAN,mEAAM,CAAN;AANS,GAAA,CAUV;;;AACA,MAAIF,gBAAgB,CAAhBA,OAAgB,CAAhBA,CAAAA,UAAAA,KAAJ,QAAA,EAAuD;AACtD,WAAA,IAAA;AACA;;AAED,MAAIG,cAA8B,GAAlC,OAAA;;AACA,SAAA,cAAA,EAAuB;AACtB,QAAID,yBAAyB,CAAA,cAAA,EAAiB;AAAEF,MAAAA,gBAAgB,EAAhBA;AAAF,KAAjB,CAA7B,EAAqE;AACpE,aAAA,IAAA;AACA;;AAEDG,IAAAA,cAAc,GAAGA,cAAc,CAA/BA,aAAAA;AACA;;AAED,SAAA,KAAA;AACA;AAMD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,qBAAA,CAAA,OAAA,EAGI;AAAA,MAAA,sBAAA;;AAAA,MADVJ,OACU,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD8B,EAC9B;AACV,MAAA,sBAAA,GAEIA,OAFJ,CAAA,gBAAA;AAAA,MACCC,gBADD,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GACoBC,OAAO,CAAPA,aAAAA,CADpB,WAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACoBA,sBAAAA,CADpB,gBAAA,GAAA,sBAAA;;AAGA,MAAI,OAAA,gBAAA,KAAJ,UAAA,EAA4C;AAC3C,UAAM,IAAA,SAAA,CAAN,mEAAM,CAAN;AAGA;;AAED,MAAKA,OAAD,CAAA,MAACA,KAAL,IAAA,EAA8C;AAC7C,WAAA,IAAA;AACA;;AAED,MAAIA,OAAO,CAAPA,YAAAA,CAAAA,aAAAA,MAAJ,MAAA,EAAoD;AACnD,WAAA,IAAA;AACA;;AAED,MAAID,gBAAgB,CAAhBA,OAAgB,CAAhBA,CAAAA,OAAAA,KAAJ,MAAA,EAAkD;AACjD,WAAA,IAAA;AACA;;AAED,SAAA,KAAA;AACA","sourcesContent":["export interface IsInaccessibleOptions {\n\tgetComputedStyle?: typeof window.getComputedStyle;\n\t/**\n\t * Can be used to return cached results from previous isSubtreeInaccessible calls.\n\t */\n\tisSubtreeInaccessible?: (element: Element) => boolean;\n}\n\n/**\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\n * which should only be used for elements with a non-presentational role i.e.\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\n *\n * Implements aria-hidden semantics (i.e. parent overrides child)\n * Ignores \"Child Presentational: True\" characteristics\n *\n * @param element\n * @param options\n * @returns {boolean} true if excluded, otherwise false\n */\nexport function isInaccessible(\n\telement: Element,\n\toptions: IsInaccessibleOptions = {}\n): boolean {\n\tconst {\n\t\tgetComputedStyle = element.ownerDocument.defaultView?.getComputedStyle,\n\t\tisSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible,\n\t} = options;\n\tif (typeof getComputedStyle !== \"function\") {\n\t\tthrow new TypeError(\n\t\t\t\"Owner document of the element needs to have an associated window.\"\n\t\t);\n\t}\n\t// since visibility is inherited we can exit early\n\tif (getComputedStyle(element).visibility === \"hidden\") {\n\t\treturn true;\n\t}\n\n\tlet currentElement: Element | null = element;\n\twhile (currentElement) {\n\t\tif (isSubtreeInaccessibleImpl(currentElement, { getComputedStyle })) {\n\t\t\treturn true;\n\t\t}\n\n\t\tcurrentElement = currentElement.parentElement;\n\t}\n\n\treturn false;\n}\n\nexport interface IsSubtreeInaccessibleOptions {\n\tgetComputedStyle?: typeof window.getComputedStyle;\n}\n\n/**\n *\n * @param element\n * @param options\n * @returns {boolean} - `true` if every child of the element is inaccessible\n */\nexport function isSubtreeInaccessible(\n\telement: Element,\n\toptions: IsSubtreeInaccessibleOptions = {}\n): boolean {\n\tconst {\n\t\tgetComputedStyle = element.ownerDocument.defaultView?.getComputedStyle,\n\t} = options;\n\tif (typeof getComputedStyle !== \"function\") {\n\t\tthrow new TypeError(\n\t\t\t\"Owner document of the element needs to have an associated window.\"\n\t\t);\n\t}\n\n\tif ((element as HTMLElement).hidden === true) {\n\t\treturn true;\n\t}\n\n\tif (element.getAttribute(\"aria-hidden\") === \"true\") {\n\t\treturn true;\n\t}\n\n\tif (getComputedStyle(element).display === \"none\") {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"module"}